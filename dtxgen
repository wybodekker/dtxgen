#!/bin/bash

Version=1.08
Myname="${0##*/}"

:<<'DOC'
= dtxgen - generate template for LaTeX self-extracting .dtx file

= Synopsis
dtxgen [options] basename.[sty,cls]	

== Options
-h,--help	print short help and exit
-H,--Help	print full documentation via less and exit
-V,--version	print version and exit
-s,--short	short, one-liner, package description
-d,--date	initial version's date. Default: current date 
-m,--mail	your email address. Default: |$EMAIL|
-n,--name	your name. Default: |$NAME|
-c,--class	(class packs only) class to be preloaded. Default: article
-f,--format	latex format to be used for compilation. Default: pdflatex
-q,--quiet	run quietly

= Description
dtxgen creates a template for a self-extracting .dtx file, based on the
model described by [Joseph Wright](www.texdev.net/2009/10/06/a-model-dtx-file/).
It is useful for those who plan to create a new Documented LaTeX Source
(.dtx) file.

Usage example:

  dtxgen -n 'your name' -m 'your@email.ad' myclass.cls

The script takes some variables such as:
- name and email address of the author,
- a short description of the class or package generated from the .dtx file,
- a date
from environment variables, or from command line options and generates,
among more, a template for the .dtx file with some minimal examples. Of
course, the user will have to replace those examples with the real work,
but the dates, basename, author's name and email address are already in
place and, depending on whether you use used a .cls or a .sty extension
in the argument, it is formatted to be either a class or a package
source file.

If you have an environment with your name and email address defined in
NAME and EMAIL, you could simply type:

  dtxgen myclass.cls

and you would end up with five files: |myclass.dtx|, |myclass.cls|,
|myclass.pdf|, |README.md|, and |Makefile|.

= Options
dtxgen recognizes the following options:

-s,--short=...	
	A short, one-liner, description for the class or package.
	By default, the string /A new LaTeX class/ or /A new LaTeX package/
	will be used.
-n,--name=...	
	Your name (first name, followed by surname). Alternatively,
	you can set a default value in the environment variable |NAME|;
	if you do so and still use this option, the option's value wills
	have priority.
-m,--mail=...	
	Your email address. Alternatively, you can set a default value ins
	the environment variable |EMAIL|; if you do so and still use this
	option, the option's value will have priority.
-c,--class=...	
	For class templates only: inserts a |\LoadClass{...}|, so that the
	new class will start with the properties of the |...| class.
	The default is |article|.
-v,--version=...		
	Set the initial version; by default 1.00 wil be used.
-d,--date=...	
	Set the initial version's date. By default, the current date will
	be used.  The date should be entered in the |yyyymmdd| format,
	although it will be stored the LaTeX way: |yyyy/mm/dd|.
-f,--format=...
	Latex format to be used for compilation. The default is pdflatex,
	but you may need another format, like xelatex of lualatex.
-q,--quiet	
	Run quietly
-V,--version	
	Prints the script's version and exits.
-h,--help	
	Prints help information and exits.
-H,--Help	
	print full documentation via less and exit

= Makefile
The |Makefile| can be used to compile new versions of your work; it
contains the following targets:

all		(the default) generate the style or class file,
		the pdf-documentation, and a README.md file.
distclean	remove all files that can be regenerated,
clean		same, except the style or class file, the
		pdf-documentation, and a README.md file.
inst		install in the user's TeX tree,
install		install in the local TeX tree (uses sudo)
zip		produce a zip file ready for upload to CTAN

= Author
[Wybo Dekker](wybo@dekkerdocumenten.nl)

= Copyright
Released under the [GNU General Public License](www.gnu.org/copyleft/gpl.html)
DOC

REd='\e[38;5;9m' Nor='\e[0m'
    die() { local i; for i; do echo -e "$Myname: $REd$i$Nor"; done 1>&2; exit 1; }
helpsrt() { sed -n '/^= Synopsis/,/^= /p' "$0"|sed '1d;$d'; exit; }
helpall() { sed -n "/^:<<'DOC'$/,/^DOC/p" "$0"|sed '1d;$d'|
            less -P"$Myname-${Version/./Â·} (press h for help, q to quit)";exit; }

:<<'DOC' #---------------------------------------------------------------------
= excheck
synopsis:	 excheck executable1 [executable2...]
description:	check if all needed execs are there and getopt is GNU
DOC
#-------------------------------------------------------------------------------
excheck() {
   local ok=true i
   ((BASH_VERSINFO>=4)) || die "Need bash version >= 4"
   for i; do 
      command -v "$i" > /dev/null && continue
      Warn "Missing executable: $i"
      ok=false
   done
   $ok || die
   getopt -T 
   (( $? == 4 )) || die "Your getopt is not GNU"
}

:<<'DOC' #----------------------------------------------------------------------
= handle_options
synopsis:	 handle_options "$@"
description:	handle the options.
globals used:	 Myname Version
globals  set:	 args short date mail name loadclass format quiet redir
returnsL	the number of remaining arguments
DOC
#-------------------------------------------------------------------------------
handle_options() {
   local options
   if ! options=$(getopt \
      -n "$Myname" \
      -o s:n:m:b:c:d:v:hHVf:qI \
      -l short:,name:,mail:,body:,class:,date:,version:,help,Help,version,quiet,format: -- "$@"
   ); then exit 1; fi
   eval set -- "$options"
   
   while [ $# -gt 0 ]; do
      case $1 in
      (-h|--help)    # print short help and exit
                     helpsrt
                     ;;
      (-H|--Help)    # print full documentation via less and exit
                     helpall
                     ;;      
      (-V|--version) # print version and exit
                     echo $Version
   		     exit
                     ;;
      (-s|--short)   # short, one-liner, package description
                     short=$2
                     shift 2
                     ;;
      (-v|--version) # initial version. Default: 1.00
		     version=$2
                     shift 2
                     ;;
      (-d|--date)    # initial version's date. Default: current date 
                     date=$2
                     shift 2
                     ;;
      (-m|--mail)    # your email address. Default: |$EMAIL|
                     mail=$2
                     shift 2
                     ;;
      (-n|--name)    # your name. Default: |$NAME|
                     name=$2
                     shift 2
                     ;;
      (-c|--class)   # (class packs only) class to be preloaded. Default: article
                     loadclass=$2
                     shift 2
                     ;;
      (-f|--format)  # latex format to be used for compilation. Default: pdflatex
		     format=$2
		     shift 2
		     ;;
      (-b|--body  )  # existing style or class to be used instead of demo
		     body="$2"
		     [[ -z $body ]] && die "kpsewhich could not find $body"
		     shift 2
		     ;;
      (-q|--quiet)   # run quietly
                     quiet=--quiet
		     redir='>/dev/null'
                     shift
                     ;;
      (-I)	     instscript "$Myname" ||
   		        die 'the -I option is for developers only'
   		     exit
                     ;;
      (--)           shift
                     break
                     ;;
      (*)            break
                     ;;
      esac
   done
   args=( "$@" )
}

excheck make getopt envsubst pdflatex makeindex zip ltxfileinfo kpsewhich

handle_options "$@"
set -- "${args[@]}"

test $# == 1 || die "I need 1 argument"

# argument must have .cls or .sty extension:
base=${1%.*}
ext=${1#*.}

case "$ext" in
(cls) typ=class; Typ=Class;
      : "${short:=A new LaTeX class}"
      lcl='\\LoadClass[a4paper,fleqn]{'"$loadclass}"
      ;;
(sty) typ=package; Typ=Package;
      : "${short:=A new LaTeX package}"
      use='\usepackage{\jobname}'
      ;;
(*)   die "The argument must have .cls or .sty extension
         (try the --help option)"
esac


: "${name:=${NAME:-(not set)}}"		# default name is envvar NAME
: "${mail:=${EMAIL:-(not set)}}"	# default email is envvar MAIL
: "${date:=$(date +%Y%m%d)}"		# default date is now
: "${version:=1.00}"			# default version is 1.00
: "${loadclass:=article}"		# default class to load is article
: "${format:=pdflatex}"			# default formatter is pdflatex

# date must be 8 digits; insert the two /'s:
if [[ ! $date =~ ^[[:digit:]]{8}$ ]]; then die "illegal date: $date"; fi
date=$(sed 's/\(....\)\(..\)\(..\)/\1\/\2\/\3/' <<<"$date")

# The short description may contain TeX commands, but then we need
# a version without them at some places; note that this removes only
# simple contructs:
shrt=$(sed 's/\\[[:alpha:]]\\+{\\([^}]*\\)}/\\1/g;s/\\//g' <<<"$short")

# Any \'s in the short description need to be duplicated for the script:
short="${short//\\/\\\\}"

test -z "$mail" && die "author's email not set - use option or environment variable EMAIL"
test -z "$name" && die "author's name not set - use option or environment variable NAME"

export abst body desc base format ext year mail use typ Typ name date
export short shrt lcl makefile readme version

if [[ -z $body ]]; then
   # if no existing style/class file was given, use the demo one:
   body="$(sed -n "/^:<<'BODY'/,/^BODY/{/BODY/!p}" "$0" |envsubst)"
   desc="$(sed -n "/^:<<'DESC'/,/^DESC/{/DESC/!p}" "$0")"
   abst="% This is a demo $Typ file"
else
   body=${body%.$ext}.$ext
   body="$(kpsewhich "$body")"
   [[ -z $body ]] && die "kpsewhich could not find $body"
   # remove any \Provides..., \NeedsTeXFormat, \endinput and %%-comments
   body="$(sed '
	/^\\Provides/{N;N;s/\\Provides.*{.*}%*\s\+\[.*\]//;}
	/^%%/d
	/^\\NeedsTeXFormat/d
	/^\\endinput/d
   ' "$body")"
   abst="% Put your abstract here"
   desc="% Put your descriptive text here"
fi
makefile="$(sed -n "/^:<<'MAKE'/,/^MAKE/{/MAKE/!p}" "$0" |envsubst)"
readme="$(sed -n "/^:<<'README'/,/^README/{/README/!p}" "$0" |envsubst)"

sed -n "/^:<<'DTX'/,/^DTX/{/DTX/!p}" "$0" |envsubst >"$base".dtx

eval "luatex -interaction=batchmode '$base.dtx' $redir" ||
   die "Error running 'luatex $base.dtx'" 'see log(s)'

make -f Makefile. $quiet || die 'Error running make'
make $quiet clean
cat <<-EOD
	
	You have 5 new files now:
	1. $base.dtx: this is the only file you need to keep and edit.
	   The other files can be generated from it with:
	   luatex $base.dtx; make -f Makefile.; make clean
	2. Makefile: can be used to recreate everything after an edit
	   of $base.dtx and to install and clean up. See the README
	   file and the dtxgen documentation.
	3. The README.md file.
	4. $base.$ext: the $Typ file.
	5. $base.pdf: the documentation.
EOD
exit 0
# ---- TEMPLATES: ----
:<<'DESC'
% \DescribeMacro{\dummyMacro}
% This macro does nothing.\index{doing nothing|usage} It is merely an
% example.  If this were a real macro, you would put a paragraph here
% describing what the macro is supposed to do, what its mandatory and
% optional arguments are, and so forth.
%
% \DescribeEnv{dummyEnv}
% This environment does nothing.  It is merely an example.
% If this were a real environment, you would put a paragraph here
% describing what the environment is supposed to do, what its
% mandatory and optional arguments are, and so forth.
DESC

:<<'BODY'
%    \end{macrocode}
% \begin{macro}{\dummyMacro}
% This is a dummy macro.  If it did anything, we'd describe its
% implementation here.
%    \begin{macrocode}
\newcommand{\dummyMacro}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{dummyEnv}
% This is a dummy environment.  If it did anything, we'd describe its
% implementation here.
%    \begin{macrocode}
\newenvironment{dummyEnv}{%
}{%
%    \end{macrocode}
% \changes{v1.00a}{%date%}{Added a spurious change log entry to
%   show what a change \emph{within} an environment definition looks
%   like.}
% Don't use |%| to introduce a code comment within a |macrocode|
% environment.  Instead, you should typeset all of your comments with
% LaTeX---doing so gives much prettier results.  For comments within a
% macro/environment body, just do an |\end{macrocode}|, include some
% commentary, and do another |\begin{macrocode}|.  It's that simple.
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{environment}
%    \begin{macrocode}
BODY

:<<'MAKE'
NAME  = $base
SHELL = bash
PWD   = $(shell pwd)
FORMAT= $format
VERS  = $(shell ltxfileinfo -v $(NAME).dtx|sed -e 's/^v//')
LOCAL = $(shell kpsewhich --var-value TEXMFLOCAL)
UTREE = $(shell kpsewhich --var-value TEXMFHOME)
all:	$(NAME).pdf
$(NAME).pdf: $(NAME).dtx
	test -e Makefile || mv Makefile{.,}
	$(FORMAT) -shell-escape -recorder -interaction=batchmode $(NAME).dtx >/dev/null
	if [ -f $(NAME).glo ]; then makeindex -q -s gglo.ist -o $(NAME).gls $(NAME).glo; fi
	if [ -f $(NAME).idx ]; then makeindex -q -s gind.ist -o $(NAME).ind $(NAME).idx; fi
	$(FORMAT) --recorder --interaction=batchmode $(NAME).dtx > /dev/null
	$(FORMAT) --recorder --interaction=batchmode $(NAME).dtx > /dev/null
clean:
	rm -f $(NAME).{aux,fls,glo,gls,hd,idx,ilg,ind,ins,log,out,toc} Makefile.
distclean: clean
	rm -f $(NAME).{pdf,$ext} README.md Makefile
inst: all
	mkdir -p $(UTREE)/{tex,source,doc}/latex/$(NAME)
	cp $(NAME).dtx $(UTREE)/source/latex/$(NAME)
	cp $(NAME).$ext $(UTREE)/tex/latex/$(NAME)
	cp $(NAME).pdf README.md $(UTREE)/doc/latex/$(NAME)
install: all
	sudo mkdir -p $(LOCAL)/{tex,source,doc}/latex/$(NAME)
	sudo cp $(NAME).dtx $(LOCAL)/source/latex/$(NAME)
	sudo cp $(NAME).$ext $(LOCAL)/tex/latex/$(NAME)
	sudo cp $(NAME).pdf README.md $(LOCAL)/doc/latex/$(NAME)
zip: all
	ln -sf . $(NAME)
	zip -Drq $(PWD)/$(NAME)-$(VERS).zip $(NAME)/{README.md,$(NAME).{pdf,dtx}}
	rm $(NAME)
MAKE

:<<'README'
# $base
     key | description
     ---:|:---
   $base | $shrt
 version | $version
    date | $date 
  author | $name
   email | $mail
 license | Released under the LaTeX Project Public License v1.3c or later

Short description:
Some text about the $typ: probably the same as the abstract.

Installation:
This is a self-extracting file. Install as follows:
1. Run "luatex $base.dtx.
2. Run "make -f Makefile." (don't forget the .)
3. Run "make install" if you have sudo rights, to install in the local tree, or
   Run "make inst" to install in your own tree.
4. Run "make clean" to remove most intermdiate files, or
   Run "make distclean" to keep the source, $base.dtx, only.
README

:<<'DTX'
% \iffalse meta-comment
%
% Copyright (C) 2021 by Wybo Dekker <wybo@dekkerdocumenten.nl>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License (LPPL), either
% version 1.3c of this license or (at your option) any later
% version.  The latest version of this license is in the file:
%
% http://www.latex-project.org/lppl.txt
%
% This work consists of the self-extracting file $base.dtx
% Installation: see the readme section above.
%
%<*internal>
\iffalse
%</internal>
%<*readme>
$readme
%</readme>
%<*makefile>
$makefile
%</makefile>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse

\generate{\file{\jobname.$ext}{\from{\jobname.dtx}{$typ}}}
%</install>
%<install>\endbatchfile
%<*internal>
\nopreamble\nopostamble
\catcode9=12
\generate{\file{README.md}{\from{\jobname.dtx}{readme}}}
\generate{\file{Makefile.}{\from{\jobname.dtx}{makefile}}}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{$base.dtx}
%</driver>
%<$typ>\NeedsTeXFormat{LaTeX2e}[2021/11/15]
%<$typ>\Provides$Typ{$base}
%<*$typ>
    [$date v$version $shrt]
%</$typ>
%<*driver>
\documentclass{ltxdoc}
\usepackage[a4paper,margin=20mm,left=50mm,nohead]{geometry}
\usepackage[numbered]{hypdoc}
$use
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{\jobname.sty}
% \DoNotIndex{\newcommand,\newenvironment}
%
% \title{\textsf{$base} --- $short\\[3ex]
%   \large\fileversion\quad\filedate}
% \author{$name\thanks{E-mail: $mail}}
% \date{}
% \maketitle
%
% \changes{v1.00}{$date}{First public release}
%
% \begin{abstract}
$abst
% \end{abstract}
% \tableofcontents
%
% \section{Usage}
$desc
% \StopEventually{^^A
% \PrintChanges
% \PrintIndex

%}
%
% \section{Implementation}
%
%    \begin{macrocode}
%<*$typ>
$lcl
$body
\endinput
%</$typ>
%    \end{macrocode}
%\Finale
DTX
